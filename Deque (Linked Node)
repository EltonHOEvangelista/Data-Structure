/**
 * author Elton Evangelista
 * Using Nodes, this class implements a Deque Interface.
 */

import java.util.NoSuchElementException;

public class LinkedDeque<T> implements DequeInterface<T> {
	
	private Node<T> front;
    private Node<T> rear;
    private int size;
	
    private static class Node<T> {
        T data;
        Node<T> next;
        Node<T> prev;

        Node(T data) {
            this.data = data;
            this.next = null;
            this.prev = null;
        }
    }

	@Override
	public void addToFront(T newEntry) {
		
		Node<T> newNode = new Node<>(newEntry);
        if (isEmpty()) {
            front = rear = newNode;
        } else {
            newNode.next = front;
            front.prev = newNode;
            front = newNode;
        }
        size++;	
	}
	
	@Override
	public void addToBack(T newEntry) {
		
		Node<T> newNode = new Node<>(newEntry);
        if (isEmpty()) {
            front = rear = newNode;
        } else {
            newNode.prev = rear;
            rear.next = newNode;
            rear = newNode;
        }
        size++;
	}

	
	@Override
	public T removeFront() {

		 if (isEmpty()) {
	            throw new NoSuchElementException("Deque is empty");
	        }

	        T removedElement = front.data;
	        if (front == rear) {
	            front = rear = null;
	        } else {
	            front = front.next;
	            front.prev = null;
	        }
	        size--;

	        return removedElement;
	}

	@Override
	public T removeBack() {

		if (isEmpty()) {
            throw new NoSuchElementException("Deque is empty");
        }

        T removedElement = rear.data;
        if (front == rear) {
            front = rear = null;
        } else {
            rear = rear.prev;
            rear.next = null;
        }
        size--;

        return removedElement;
	}

	@Override
	public T getFront() {

		if (isEmpty()) {
            throw new NoSuchElementException("Deque is empty");
        }
        return front.data;
	}

	@Override
	public T getBack() {

		if (isEmpty()) {
            throw new NoSuchElementException("Deque is empty");
        }
        return rear.data;
	}

	@Override
	public boolean isEmpty() {

		return size == 0;
	}

	@Override
	public void clear() {

		front = rear = null;
        size = 0;
	}
	
	public int size() {

		return size;
	}
	
}
