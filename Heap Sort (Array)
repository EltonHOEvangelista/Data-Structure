/**
 * author Elton Evangelista
 * Using a generic array, this class implements heap sort.
 */

public class HeapSort<T extends Comparable<? super T>> {
	
	private static <T extends Comparable<? super T>> void reheap(T[] heap, int lindex, int rindex){
		
		int largest = rindex;
        int lChild = 2 * rindex + 1;
        int rChild = 2 * rindex + 2;
        
        if (lChild < lindex && heap[lChild].compareTo(heap[largest]) > 0) {
            largest = lChild;
        }
        if (rChild < lindex && heap[rChild].compareTo(heap[largest]) > 0) {
            largest = rChild;
        }
        if (largest != rindex) {
        	T temp = heap[rindex];
        	heap[rindex] = heap[largest];
        	heap[largest] = temp;
        	reheap(heap, lindex, largest);
        }
	}
	
	@SuppressWarnings("hiding")
	public <T extends Comparable<? super T>> void heapSort(T[] array){	
	
		int n = array.length;
		for(int i=n/2-1;i>=0;i--) {
			reheap(array,n, i);
		}
		for (int i=n-1;i>0;i--){
			T temp = array[0];
			array[0] = array[i];
			array[i] = temp;
			reheap(array, i, 0);
		}
	}
}
